utils/errors.js:
class AppError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.statusCode = statusCode;
        this.status = `${statusCode}`.startsWith('4') ? 'fail' : 'error';
        this.isOperational = true;

        Error.captureStackTrace(this, this.constructor);
    }
}

class ValidationError extends AppError {
    constructor(message) {
        super(message, 400);
    }
}

class NotFoundError extends AppError {
    constructor(message) {
        super(message, 404);
    }
}

class DataValidationError extends AppError {
    constructor(message) {
        super(message, 422);
    }
}

class AuthError extends AppError {
    constructor(message) {
        super(message, 401);
    }
}

class ServerError extends AppError {
    constructor(message) {
        super(message, 500);
    }
}

class ForbiddenError extends AppError {
    constructor(message) {
        super(message, 403);
    }
}

class DataError extends AppError {
    constructor(message) {
        super(message, 409);
    }
}

module.exports = {
    AppError,
    ValidationError,
    NotFoundError,
    DataValidationError,
    AuthError,
    ServerError,
    ForbiddenError,
    DataError
};



utils/errorHandler.js

const { AppError } = require('./errors');

const errorHandler = (err, req, res, next) => {
    err.statusCode = err.statusCode || 500;
    err.status = err.status || 'error';

    res.status(err.statusCode).json({
        status: err.status,
        message: err.message
    });
};

module.exports = errorHandler;


server or app :
const express = require('express');
const app = express();
const errorHandler = require('./utils/errorHandler');
const { NotFoundError } = require('./utils/errors');

// Your routes here
app.use('/register', registerController);
app.use('/login', loginController);
app.use('/billing', billingController);

// Handle 404 errors
app.all('*', (req, res, next) => {
    next(new NotFoundError(`Can't find ${req.originalUrl} on this server!`));
});

// Global error handling middleware
app.use(errorHandler);

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

controller  :

const User = require('../models/User');
const { ValidationError, AppError } = require('../utils/errors');

exports.register = async (req, res, next) => {
    try {
        const newUser = await User.create(req.body);
        res.status(201).json({
            status: 'success',
            data: {
                user: newUser
            }
        });
    } catch (err) {
        if (err.name === 'ValidationError') {
            return next(new ValidationError(err.message));
        }
        next(new AppError('Internal Server Error', 500));
    }
};


login : 
const User = require('../models/User');
const bcrypt = require('bcryptjs');
const { ValidationError, AppError } = require('../utils/errors');

exports.login = async (req, res, next) => {
    try {
        const { email, password } = req.body;

        if (!email || !password) {
            return next(new ValidationError('Please provide email and password'));
        }

        const user = await User.findOne({ email }).select('+password');
        if (!user || !(await bcrypt.compare(password, user.password))) {
            return next(new ValidationError('Incorrect email or password'));
        }

        res.status(200).json({
            status: 'success',
            data: {
                user
            }
        });
    } catch (err) {
        next(new AppError('Internal Server Error', 500));
    }
};


billing  : 
const { AppError } = require('../utils/errors');

exports.getBillingInfo = async (req, res, next) => {
    try {
        // Your billing logic here
        res.status(200).json({
            status: 'success',
            data: {
                // billing data
            }
        });
    } catch (err) {
        next(new AppError('Internal Server Error', 500));
    }
};

const express = require('express');
const mongoose = require('mongoose');
const app = express();
const errorHandler = require('./utils/errorHandler');
const { NotFoundError } = require('./utils/errors');

// Middleware
app.use(express.json());

// Routes
const registerController = require('./controllers/registerController');
const loginController = require('./controllers/loginController');
const billingController = require('./controllers/billingController');

app.post('/register', registerController.register);
app.post('/login', loginController.login);
app.get('/billing', billingController.getBillingInfo);

// Handle 404 errors
app.all('*', (req, res, next) => {
    next(new NotFoundError(`Can't find ${req.originalUrl} on this server!`));
});

// Global error handling middleware
app.use(errorHandler);

// Connect to MongoDB and start server
mongoose.connect('mongodb://localhost:27017/yourdbname', {
    useNewUrlParser: true,
    useUnifiedTopology: true
}).then(() => {
    console.log('Connected to MongoDB');
    const PORT = process.env.PORT || 3000;
    app.listen(PORT, () => {
        console.log(`Server running on port ${PORT}`);
    });
}).catch(err => {
    console.error('Database connection error:', err);
});
