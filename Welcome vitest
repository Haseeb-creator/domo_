// WelcomeSummaryContent.test.jsx
import React from 'react';
import { render, screen, waitFor } from '@testing-library/react';
import { describe, it, expect, vi } from 'vitest';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import WelcomeSummaryContent from '../../../../src/components/welcome-content/welcome-summary-content/WelcomeSummaryContent';

vi.mock('react-redux', async () => {
  const actual = await vi.importActual('react-redux');
  return {
    ...actual,
    useDispatch: () => vi.fn(),
    useSelector: vi.fn()
  };
});

vi.mock('../../../../../src/utils/notifications', () => ({
  checkExistingNotifications: vi.fn(() => false)
}));

vi.mock('../../../../../src/shared/queries', async () => {
  const actual = await vi.importActual('../../../../../src/shared/queries');
  return {
    ...actual,
    getUserAccessData: vi.fn(() => ({
      data: {
        data2: {
          userInfo: {
            entitlements2: ['MYTIBILLING', 'MYTIBPREMAUDIT']
          }
        }
      },
      isLoading: false,
      isError: false
    })),
    getBannerMessagesData: vi.fn(() => ({
      data: {
        data2: {
          premiumAuditDuePolicies: [
            { term: { policyEffectiveDt: '2024-01-01' } }
          ]
        }
      },
      isLoading: false,
      isError: false
    })),
    getBillingData: vi.fn(() => ({
      data: {
        data2: {
          billingGrid1: [
            { status: 'PASTDUE', billNr: 'BILL123' }
          ]
        }
      },
      isLoading: false,
      isError: false
    })),
    getOpenClaimsData: vi.fn(() => ({
      data: {
        data2: {
          homeClaimDetails: [{ id: 1 }]
        }
      },
      isLoading: false,
      isError: false
    }))
  };
});

const renderWithProviders = (ui) => {
  const client = new QueryClient();
  return render(<QueryClientProvider client={client}>{ui}</QueryClientProvider>);
};

describe('WelcomeSummaryContent', () => {
  it('renders billing due message if billingData has PASTDUE bill', async () => {
    renderWithProviders(<WelcomeSummaryContent />);
    await waitFor(() => {
      expect(screen.getByText(/bill/i)).toBeInTheDocument();
    });
  });

  it('renders open claims when data is available', async () => {
    renderWithProviders(<WelcomeSummaryContent />);
    await waitFor(() => {
      expect(screen.getByText(/claim/i)).toBeInTheDocument();
    });
  });

  it('renders premium audit when audit data exists', async () => {
    renderWithProviders(<WelcomeSummaryContent />);
    await waitFor(() => {
      expect(screen.getByText(/premium audit/i)).toBeInTheDocument();
    });
  });

  it('renders nothing if all sources are empty', async () => {
    const { getUserAccessData, getBannerMessagesData, getBillingData, getOpenClaimsData } = await import('../../../../../src/shared/queries');

    getUserAccessData.mockReturnValue({
      data: { data2: {} },
      isLoading: false,
      isError: false,
    });
    getBannerMessagesData.mockReturnValue({
      data: { data2: {} },
      isLoading: false,
      isError: false,
    });
    getBillingData.mockReturnValue({
      data: { data2: {} },
      isLoading: false,
      isError: false,
    });
    getOpenClaimsData.mockReturnValue({
      data: { data2: {} },
      isLoading: false,
      isError: false,
    });

    const { container } = renderWithProviders(<WelcomeSummaryContent />);
    await waitFor(() => {
      expect(container).toBeEmptyDOMElement();
    });
  });
});
